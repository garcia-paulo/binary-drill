{"version":3,"sources":["App.js","index.js"],"names":["App","useState","number","setNumber","binary","setBinary","input","setInput","acertos","setAcertos","mode","setMode","generateNumber","Math","floor","random","toString","useEffect","parseInt","array","temp","x","length","console","log","i","push","slice","populate","className","colSpan","type","onChange","event","target","value","onClick","ReactDOM","render","document","getElementById"],"mappings":"0KAsHeA,MAnHf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEeF,mBAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAF5D,mBAENG,EAFM,KAEEC,EAFF,OAGaJ,mBAAS,IAHtB,mBAGNK,EAHM,KAGCC,EAHD,OAIiBN,mBAAS,GAJ1B,mBAINO,EAJM,KAIGC,EAJH,OAKWR,mBAAS,GALpB,mBAKNS,EALM,KAKAC,EALA,KAOPC,EAAiB,WAEnBT,EADY,IAATO,EACQG,KAAKC,MAAM,IAAAD,KAAKE,SAAuB,GAAIC,SAAS,GAErDH,KAAKC,MAAM,IAAAD,KAAKE,SAAuB,KA0DrD,OAJAE,qBAAU,WAAQL,MAAoB,CAACF,IACvCO,qBAAU,YA5BK,IAATP,GAAcQ,SAASZ,GAAOU,SAAS,KAAOd,GAK9B,IAATQ,GACLJ,IAAUJ,EAAOc,SAAS,MAL9BT,EAAS,IACTJ,EAAU,IACVS,IACAH,EAAWD,EAAU,MAwBS,CAACF,IACnCW,qBAAU,YApDO,WAEf,GADAZ,EAAU,IACG,IAATK,EAAY,CACd,IAAIS,EAAQ,GACRC,EAAOlB,EACPmB,EAAI,EAAInB,EAAOoB,OACnBC,QAAQC,IAAIJ,EAAMlB,GAElB,IAAK,IAAIuB,EAAI,EAAGA,EAAIJ,EAAGI,IACrBN,EAAMO,KAAK,KAGb,KAAON,EAAKE,OAAS,GACnBH,EAAMO,KAAKN,EAAKO,MAAM,EAAG,IACzBP,EAAOA,EAAKO,MAAM,GAEpBR,EAAMO,KAAKN,EAAKO,MAAM,EAAG,IAEzBtB,EAAUc,IAkCIS,KAAc,CAAC1B,IAG/B,sBAAK2B,UAAU,MAAf,UACE,0CACYrB,KAEZ,uBAAOqB,UAAU,QAAjB,SACE,kCACE,6BACE,oBAAIC,QAAQ,IAAZ,SAA2B,IAATpB,GAAgBR,MAEpC,+BACE,qCACA,oCACA,oCACA,oCACA,mCACA,mCACA,mCACA,sCAEF,+BACE,6BAAKE,EAAO,KACZ,6BAAKA,EAAO,KACZ,6BAAKA,EAAO,KACZ,6BAAKA,EAAO,KACZ,6BAAKA,EAAO,KACZ,6BAAKA,EAAO,KACZ,6BAAKA,EAAO,KACZ,6BAAKA,EAAO,QAEd,6BACE,oBAAI0B,QAAQ,IAAZ,SACE,uBAAOC,KAAK,OAAOC,SAhDF,SAAAC,GAC3B1B,EAAS0B,EAAMC,OAAOC,QA+CuCA,MAAO7B,aAKlE,4BACE,wBAAQ8B,QAAS,WAhDnBzB,EADED,EAAO,EACDA,EAAO,EAEP,IA8CN,SAAgD,IAATA,GAAe,mDACvC,IAATA,GAAe,gDACN,IAATA,GAAe,qDC5G7B2B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.bd386cb2.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport './App.css';\n\nfunction App() {\n  const [number, setNumber] = useState(\"\");\n  const [binary, setBinary] = useState([\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"])\n  const [input, setInput] = useState(\"\");\n  const [acertos, setAcertos] = useState(0);\n  const [mode, setMode] = useState(1);\n\n  const generateNumber = () => {\n    if ((mode === 1)) {\n      setNumber((Math.floor(Math.random() * (255 - 0) + 0)).toString(2));\n    } else {\n      setNumber(Math.floor(Math.random() * (255 - 0) + 0));\n    }\n  }\n\n  const populate = () => {\n    setBinary([]);\n    if (mode === 1) {\n      let array = [];\n      let temp = number;\n      let x = 8 - number.length;\n      console.log(temp, number);\n\n      for (let i = 0; i < x; i++) {\n        array.push(\"0\");\n      }\n\n      while (temp.length > 1) {\n        array.push(temp.slice(0, 1));\n        temp = temp.slice(1);\n      }\n      array.push(temp.slice(0, 1));\n\n      setBinary(array);\n    }\n  }\n\n  const checkValue = () => {\n    if (mode === 1 && parseInt(input).toString(2) === number) {\n      setInput(\"\");\n      setNumber(\"\");\n      generateNumber();\n      setAcertos(acertos + 1);\n    } else if (mode === 2) {\n      if (input === number.toString(2)) {\n        setInput(\"\");\n        setNumber(\"\");\n        generateNumber();\n        setAcertos(acertos + 1);\n      }\n    }\n  }\n\n  const handleChange = name => event => {\n    setInput(event.target.value);\n  }\n\n  const changeMode = () => {\n    if (mode < 2) {\n      setMode(mode + 1);\n    } else {\n      setMode(1);\n    }\n  }\n\n  useEffect(() => { generateNumber() }, [mode]);\n  useEffect(() => { checkValue() }, [input]);\n  useEffect(() => { populate() }, [number]);\n\n  return (\n    <div className=\"App\">\n      <p>\n        Acertos: {acertos}\n      </p>\n      <table className=\"table\">\n        <tbody>\n          <tr>\n            <th colSpan=\"8\">{(mode === 2) && (number)}</th>\n          </tr>\n          <tr>\n            <td>128</td>\n            <td>64</td>\n            <td>32</td>\n            <td>16</td>\n            <td>8</td>\n            <td>4</td>\n            <td>2</td>\n            <td>1</td>\n          </tr>\n          <tr>\n            <th>{binary[0]}</th>\n            <th>{binary[1]}</th>\n            <th>{binary[2]}</th>\n            <th>{binary[3]}</th>\n            <th>{binary[4]}</th>\n            <th>{binary[5]}</th>\n            <th>{binary[6]}</th>\n            <th>{binary[7]}</th>\n          </tr>\n          <tr>\n            <td colSpan=\"8\">\n              <input type=\"text\" onChange={handleChange(\"name\")} value={input} />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <p>\n        <button onClick={() => changeMode()}>{(mode === 1 && (<>BIN√ÅRIO</>))\n          || (mode === 2 && (<>DECIMAL</>))\n          || (mode === 0 && (<>AMBOS</>))}</button>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
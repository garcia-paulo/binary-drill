{"version":3,"sources":["App.js","index.js"],"names":["App","useState","number","setNumber","binary","setBinary","input","setInput","generateBinary","Math","floor","random","toString","useEffect","parseInt","array","temp","x","length","i","push","slice","populate","className","colSpan","type","onChange","event","target","value","ReactDOM","render","document","getElementById"],"mappings":"0KAsFeA,MAnFf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEeF,mBAAS,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAF5D,mBAENG,EAFM,KAEEC,EAFF,OAGaJ,mBAAS,IAHtB,mBAGNK,EAHM,KAGCC,EAHD,KAKPC,EAAiB,WACrBL,EAAWM,KAAKC,MAAM,IAAAD,KAAKE,SAAuB,GAAGC,SAAS,IAC9DP,EAAU,KAqCZ,OAJAQ,qBAAU,WAAQL,MAAoB,IACtCK,qBAAU,WAZJC,SAASR,GAAOM,SAAS,KAAOV,IAClCK,EAAS,IACTJ,EAAU,IACVK,OAS8B,CAACF,IACnCO,qBAAU,YAhCO,WAKf,IAJA,IAAIE,EAAQ,GACRC,EAAOd,EACPe,EAAI,EAAIf,EAAOgB,OAEVC,EAAI,EAAGA,EAAIF,EAAGE,IACrBJ,EAAMK,KAAK,KAGb,KAAOJ,EAAKE,OAAS,GACnBH,EAAMK,KAAKJ,EAAKK,MAAM,EAAG,IACzBL,EAAOA,EAAKK,MAAM,GAEpBN,EAAMK,KAAKJ,EAAKK,MAAM,EAAG,IAEzBhB,EAAUU,GAiBMO,KAAc,CAACpB,IAG/B,qBAAKqB,UAAU,MAAf,SAEE,uBAAOA,UAAU,QAAjB,SACE,kCAIE,+BACE,qCACA,oCACA,oCACA,oCACA,mCACA,mCACA,mCACA,sCAEF,+BACE,6BAAKnB,EAAO,KACZ,6BAAKA,EAAO,KACZ,6BAAKA,EAAO,KACZ,6BAAKA,EAAO,KACZ,6BAAKA,EAAO,KACZ,6BAAKA,EAAO,KACZ,6BAAKA,EAAO,KACZ,6BAAKA,EAAO,QAEd,6BACE,oBAAIoB,QAAQ,IAAZ,SACE,uBAAOC,KAAK,OAAOC,SAtCF,SAAAC,GAC3BpB,EAASoB,EAAMC,OAAOC,QAqCuCA,MAAOvB,gBCzExEwB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.184d53f3.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport './App.css';\n\nfunction App() {\n  const [number, setNumber] = useState(\"\");\n  const [binary, setBinary] = useState([\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"])\n  const [input, setInput] = useState(\"\");\n\n  const generateBinary = () => {\n    setNumber((Math.floor(Math.random() * (255 - 0) + 0).toString(2)));\n    setBinary([]);\n  }\n\n  const populate = () => {\n    let array = [];\n    let temp = number;\n    let x = 8 - number.length;\n\n    for (let i = 0; i < x; i++) {\n      array.push(\"0\");\n    }\n\n    while (temp.length > 1) {\n      array.push(temp.slice(0, 1));\n      temp = temp.slice(1);\n    }\n    array.push(temp.slice(0, 1));\n\n    setBinary(array);\n  }\n\n  const checkValue = () => {\n    if (parseInt(input).toString(2) === number) {\n      setInput(\"\");\n      setNumber(\"\");\n      generateBinary();\n    }\n  }\n\n  const handleChange = name => event => {\n    setInput(event.target.value);\n  }\n\n  useEffect(() => { generateBinary() }, []);\n  useEffect(() => { checkValue() }, [input]);\n  useEffect(() => { populate() }, [number]);\n\n  return (\n    <div className=\"App\">\n\n      <table className=\"table\">\n        <tbody>\n          {/* <tr>\n            <th colSpan=\"8\">{ }</th>\n          </tr> */}\n          <tr>\n            <td>128</td>\n            <td>64</td>\n            <td>32</td>\n            <td>16</td>\n            <td>8</td>\n            <td>4</td>\n            <td>2</td>\n            <td>1</td>\n          </tr>\n          <tr>\n            <th>{binary[0]}</th>\n            <th>{binary[1]}</th>\n            <th>{binary[2]}</th>\n            <th>{binary[3]}</th>\n            <th>{binary[4]}</th>\n            <th>{binary[5]}</th>\n            <th>{binary[6]}</th>\n            <th>{binary[7]}</th>\n          </tr>\n          <tr>\n            <td colSpan=\"8\">\n              <input type=\"text\" onChange={handleChange(\"name\")} value={input} />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}